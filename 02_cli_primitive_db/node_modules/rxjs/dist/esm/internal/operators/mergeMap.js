import { map } from 'rxjs/dist/esm/internal/operators/map';
import { innerFrom } from 'rxjs/dist/esm/internal/observable/innerFrom';
import { operate } from 'rxjs/dist/esm/internal/util/lift';
import { mergeInternals } from 'rxjs/dist/esm/internal/operators/mergeInternals';
import { isFunction } from 'rxjs/dist/esm/internal/util/isFunction';
export function mergeMap(project, resultSelector, concurrent = Infinity) {
    if (isFunction(resultSelector)) {
        return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));
}
//# sourceMappingURL=mergeMap.js.map