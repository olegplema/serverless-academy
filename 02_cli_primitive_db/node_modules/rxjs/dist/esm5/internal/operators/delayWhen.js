import { concat } from 'rxjs/dist/cjs/internal/observable/concat';
import { take } from 'rxjs/dist/cjs/internal/operators/take';
import { ignoreElements } from 'rxjs/dist/cjs/internal/operators/ignoreElements';
import { mapTo } from 'rxjs/dist/cjs/internal/operators/mapTo';
import { mergeMap } from 'rxjs/dist/cjs/internal/operators/mergeMap';
import { innerFrom } from 'rxjs/dist/cjs/internal/observable/innerFrom';
export function delayWhen(delayDurationSelector, subscriptionDelay) {
    if (subscriptionDelay) {
        return function (source) {
            return concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));
        };
    }
    return mergeMap(function (value, index) { return innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)); });
}
//# sourceMappingURL=delayWhen.js.map